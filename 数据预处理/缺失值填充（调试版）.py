import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.impute import KNNImputer
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
import matplotlib.pyplot as plt

# 加载数据
file_path = r"D:\\研二2\\论文撰写\\原始初步处理完整数据.xlsx"  # 替换为你的Excel文件路径
df = pd.read_excel(file_path)

# 查看数据的基本信息
print("原始数据集的前几行：")
print(df.head())

# 手动指定每种类型的特征
# 根据数据的实际含义和业务逻辑手动指定
id_column = ['响应者序列号']  # 无需处理的列id_column = ['ID']  # 无需处理的列
numeric_features = ['年龄（以岁为单位）（1：20-44岁以下为青年人。2：45岁至59岁为中年人。3：60岁至74岁为年轻老年人。4：75岁至89岁为老年人。','家庭收入与贫困比率（1：<1.3、2：1.3-3.5、3：>3.5）','体重（kg）','身高（cm）','BMI - 体重指数 （kg/m**2）','大腿长度 （cm）','上臂长度 （cm）','臂围（cm）','腰围 （cm）','臀围 （cm）','平均收缩压','平均舒张压','平均脉冲','成功测量次数','测量次数总计','中位刚度 （E），千帕 （kPa）',' 刚度 E 四分位距 （IQRe）','比率：刚度 IQRe / 中位数 E','中值 CAP，分贝/米 （dB/m）','CAP 四分位距 （IQRc）','直接高密度脂蛋白胆固醇 （mg/dL）（40-75正常）','总胆固醇 （mg/dL）理想范围：低于200mg/dl，心血管健康的风险较低水平。边缘升高：200至239mg/dl之间。患者的心血管健康风险可能开始增加。升高：高于或等于240mg/dl。心血管健康的高风险水平，需要采取相应的治疗措施。',' “禁食”的总时长（小时）',' “禁食”的总时长（分钟）','白细胞计数（1000 个细胞/μL）','淋巴细胞百分比 （%）','单核细胞百分比 （%）','分段中性粒细胞百分比 （%）','嗜酸性粒细胞百分比 （%）','嗜碱性粒细胞百分比 （%）','淋巴细胞数量（1000 个细胞/μL）','单核细胞数量（1000 个细胞/μL）','分段的中性粒细胞数量 （1000 个细胞/μL）',' 嗜酸性粒细胞数量（1000 个细胞/μL）','嗜碱性粒细胞数量（1000 个细胞/μL）','红细胞计数（百万个细胞/μL）','血红蛋白 （g/dL）','血细胞比容 （%）','平均细胞体积 （fL）','平均电池 Hgb 浓度 （g/dL）','平均细胞血红蛋白 （pg）','红细胞分布宽度 （%）','血小板计数（1000 个细胞/μL）','平均血小板体积 （fL）','有核红细胞','糖化血红蛋白 （%）（≥6.5%诊断为糖尿病）','铁蛋白 （ng/mL）成年男性正常范围30-400ng/mL，成年女性正常范围15-150ng/mL','空腹血糖 （mmol/L）','血清总叶酸 （nmol/L）','红细胞叶酸 （ng/mL','服用的处方药数量','过去 12 个月平均酒精饮料杯数','工作日睡眠时间（3 至 13.5：值范围，2：少于 3 小时，14：14 小时或更长时间）','周末睡眠时间（3 至 13.5：值范围，2：少于 3 小时，14：14 小时或更长时间）','久坐活动-分钟（0 到 1380：值范围，拒绝，不知道）','自我报告的体重 - 1 年前 （磅）（拒绝，不知道）','上周工作小时数（6 至 78：值范围，5：1-5 小时，80：80 小时或更长时间，拒绝，不知道）','工作日的正常睡眠时间（时）','工作日的正常睡眠时间（分）','工作日的正常唤醒时间（时）','工作日的正常唤醒时间（分）','周末的正常睡眠时间（时）','周末的正常睡眠时间（分）','周末的正常唤醒时间（时）','周末的正常唤醒时间（分）']  # 数值型特征列名

categorical_features = ['种族（1墨西哥裔美国人，2其他西班牙裔，3非西班牙裔白人，4非西班牙裔黑人，6非西班牙裔亚裔，7其他种族 - 包括多种族）', '教育水平 - 成人 20+（1： 年级以下，2 -11 年级（包括 12 年级，无文凭），3高中毕业/GED 或同等学历，4一些大学或 AA 学位，5大专以上学历，拒绝，不知道）','婚姻状况（1已婚/与伴侣同住，2丧偶/离婚/分居，3从未结婚，拒绝，不知道）','弹性成像检查状态（1 = 完成检查，2 = 部分检查，3 = 不合格的参与者（请参阅上面的资格标准）， 4 = 未完成（即拒绝、检查期间限制时间、其他）。','甲型肝炎抗体（1阳性，2阴性，3不确定）','乙型肝炎表面抗体（1阳，2阴性，3不确定）','过去 12 个月喝啤酒的频率（0去年从来没有，1每天，2几乎每天，3每周 3 至 4 次，4每周 2 次，5每周一次，6每月 2 至 3 次，7每月一次，8去年 7 到 11 次，9去年 3 至 6 次，10去年 1 至 2 次，拒绝，不知道）','每周、每月或每年在一天内喝了多少天（0：去年从来没有，1：每天，2：几乎每天，3：每周 3 至 4 次，4：每周 2 次，5：每周一次，6：每月 2 至 3 次，7：每月一次，8：去年 7 到 11 次，9：去年 3 至 6 次，10：去年 1 至 2 次，拒绝，不知道）','评价您的牙齿和牙龈的健康状况（1优秀，2非常好，3好，4一般，5不好，拒绝，不知道）','去年口腔疼痛的频率是多少？（1非常经常，2经常，3偶尔，4几乎从来没有，5从不，拒绝，不知道）','在过去一年中，是否因为牙齿、口腔或假牙问题而难以完成日常工作或上学？','接种甲型肝炎疫苗（1：是的，至少 2 剂，2：少于 2 剂，3无剂量，拒绝，不知道）','多久待在阴凉处一次？（1总是，2大多数时候，3有时，4很少，5从不，6不在阳光下外出，拒绝，不知道）','穿长袖衬衫（1总是，2大多数时候，3有时，4很少，5从不，拒绝，不知道）','使用防晒霜？（1总是，2大多数时候，3有时，4很少，5从不，拒绝，不知道）','漏尿的频率如何？（1从不，2每月少于一次，3每月几次，4每周几次，5每天和/或晚上，拒绝，不知道）','过去一个月，醒来小便多少次？（0：0，1：1，2：2，3：3，4：4，5：5 个或更多，拒绝，不知道）',' 家庭每月贫困水平类别（1：每月贫困水平指数 <= 1.30，2：1.30 < 每月贫困水平指数 <= 1.85，3：每月贫困水平指数 >1.85，拒绝，不知道）','一般听力状况（1非常好，2好，3一点麻烦，4中度听力问题，5很多麻烦，6聋，拒绝，不知道）','上一次让听力专家做听力测试是什么时候？（1不到一年前，2：1 年 到 4 年前，3：5 到  年前，4十年或更长时间前，5从不，拒绝，不知道）','难以听清有噪音的对话（1总是，2通常，3大约一半的时间，4很少，5从不，拒绝，不知道）','住在这里的人抽烟？（0：家里没有人是吸烟者，1：1 名家庭成员是吸烟者，2：2 名或以上家庭成员吸烟，：拒绝，不知道）','您现在抽烟吗？（1每天，2有些日子，3一点也不，7拒绝，9不知道）','在过去的 2 周里，您多久被以下问题困扰一次：对做事没有什么兴趣或乐趣？（0一点也不，1几天，2超过一半的天数，3几乎每天，拒绝，不知道）','情绪低落、沮丧或绝望','睡眠困难或睡眠过多','感到疲倦或精力不足','食欲不振或暴饮暴食','自我感觉不好','难以集中精力做事','移动或说话缓慢或过快','以为你死了会更好','这些问题造成的困难','一般健康状况（1优秀，2非常好，3好，4一般，5不好，拒绝，不知道）','医疗保健的常规去处（1是的，2没有地方，3有不止一个地方，拒绝，不知道）','上周完成的工作类型（1在工作或企业工作，2有工作或生意，但不在工作中，3找工作，4没有工作或生意，拒绝，不知道）','医生告诉你有糖尿病（1是的，2不，3边界，拒绝，不知道）']  # 多分类特征列名

# 二分类特征（排除数值型和二分类特征后剩余的特征）
binary_features = [
    col for col in df.columns
    if col not in numeric_features and col not in categorical_features and col not in id_column
]

print("\n手动指定的特征类型：")
print("数值型特征：", numeric_features)
print("二分类特征：", binary_features)
print("多分类特征：", categorical_features)

# 1. 定义预处理步骤
numeric_transformer = Pipeline(steps=[
    ('scaler', StandardScaler())  # 对数值型数据进行标准化
])

categorical_transformer = Pipeline(steps=[
    ('onehot', OneHotEncoder(handle_unknown='ignore'))  # 对多分类数据进行独热编码
])

# 使用ColumnTransformer组合预处理步骤
preprocessor = ColumnTransformer(
    transformers=[
        ('num', numeric_transformer, numeric_features),
        ('cat', categorical_transformer, categorical_features)
    ],
    remainder='passthrough'  # 对未处理的列（如二分类特征）保持原样
)

# 2. 定义完整的处理流程（加权KNN填充）
pipeline = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('imputer', KNNImputer(n_neighbors=5, weights='distance'))  # 使用加权KNN填充缺失值
])

# 3. 应用预处理和填充
df_processed = pipeline.fit_transform(df)

# 4. 将处理后的数据转换为DataFrame
processed_columns = numeric_features + list(pipeline.named_steps['preprocessor'].named_transformers_['cat'].named_steps['onehot'].get_feature_names_out()) + binary_features
df_processed = pd.DataFrame(df_processed, columns=processed_columns)

print("\n处理后的数据集的前几行：")
print(df_processed.head())



# 7. 保存处理后的数据到Excel文件
output_file_path = r"D:\\研二2\\论文撰写\\标准化后的数据.xlsx"  # 输出文件路径
df_processed.to_excel(output_file_path, index=False)
print(f"\n处理后的数据已保存到 '{output_file_path}' 文件中。")